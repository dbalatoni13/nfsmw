#!/usr/bin/env python3

###
# Splits the ELF according to the config.yml and generates a config.json based on it
#
# Usage:
#   python3 tools/splat_to_config_json.py config/VERSION/config.yml build/VERSION
###

import argparse
from pathlib import Path
import json
import splat
import splat.scripts.split as split


def generate_config_json(config_yml: Path, build_folder: Path) -> str:
    split.main(
        [config_yml],
        modes="all",
        verbose=True,
    )

    linker_entries = split.linker_writer.entries

    config_json = {
        "version": "1.7.0",
        "name": "main",
        "module_id": 0,  # TODO for rels
        "ldscript": (build_folder / "ldscript.ld").as_posix(),
        "entry": "__start",  # TODO
        "units": [],
        "extract": [],
        "modules": [],
        "links": [],
    }

    for entry in linker_entries:
        seg = entry.segment

        if seg.type[0] == ".":
            continue

        if entry.object_path is None:
            continue

        src_path = entry.src_paths[0]
        # this removes .../asm/
        name = Path(*src_path.parts[3:]).as_posix()
        # src_path = Path(*src_path.parts[src_path.parts.index("asm") + 1 :])

        obj_path = (build_folder / "obj" / name).as_posix().removesuffix(
            ".s"
        ).removesuffix(".cpp").removesuffix(".c") + ".o"
        src_path = name.removesuffix(".s")
        config_json["units"].append(
            {
                "object": obj_path,
                "name": src_path,
                "autogenerated": False,  # TODO
                "code_size": 0,  # these are not needed
                "data_size": 0,
            }
        )

    return json.dumps(config_json)


def main() -> None:
    parser = argparse.ArgumentParser(
        description="""Splits the configured binary and generates a config.json"""
    )
    parser.add_argument(
        "yml_file",
        help="""Config yml in""",
    )
    parser.add_argument(
        "build_folder",
        help="""Build folder out""",
    )
    args = parser.parse_args()

    output = generate_config_json(Path(args.yml_file), Path(args.build_folder))

    with open(Path(args.build_folder) / "config.json", "w", encoding="UTF-8") as f:
        f.write(output)


if __name__ == "__main__":
    main()
